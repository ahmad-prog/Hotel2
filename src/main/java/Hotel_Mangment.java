/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import com.tables;

import java.sql.*;
import javax.swing.*;

/**
 * @author ahmad
 */
public class Hotel_Mangment extends javax.swing.JFrame {

    /**
     * Creates new form Hotel_Mangment
     */
    public Hotel_Mangment() {
        initComponents();

        try {
            Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
            System.out.println("connection done");
            Statement s = c.createStatement();
            ResultSet r = s.executeQuery("SELECT `ID` FROM `hotel`");
            while (r.next()) {
                var gg = r.getInt("ID");
                hIDforCus.addItem(String.valueOf(gg));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        try {
            Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
            System.out.println("connection done");
            Statement s = c.createStatement();
            ResultSet r = s.executeQuery("SELECT `ID` FROM `hotel`");
            //r.first();
            while (r.next()) {
                var gg = r.getInt("ID");
                RoomHotelID.addItem(String.valueOf(gg));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
            System.out.println("connection done");
            Statement s = c.createStatement();
            ResultSet r = s.executeQuery("SELECT `ID` FROM `employee`");
            //r.first();
            while (r.next()) {
                var gg = r.getInt("ID");
                eIDforW.addItem(String.valueOf(gg));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        try {
            Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
            System.out.println("connection done");
            Statement s = c.createStatement();
            ResultSet r = s.executeQuery("SELECT `name` FROM `role`");
            while (r.next()) {
                var gg = r.getString("name");
                roleNforW.addItem(gg);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        try {
            Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
            System.out.println("connection done");
            Statement s = c.createStatement();
            ResultSet r = s.executeQuery("SELECT `ID` FROM `hotel`");
            while (r.next()) {
                var gg = r.getInt("ID");
                hIDforEmp.addItem(String.valueOf(gg));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }


    }

    tables t = new tables();

    public static boolean checker(long start_date, long end_date, int roomnumber, int hotelID) {
        try {
            Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
            System.out.println("connection done for check");
            var p = c.prepareStatement("SELECT `roomNumber`, `startDate` , `endDate` , `hotelID` FROM `customer`");
            var r = p.executeQuery();
            while (r.next()) {
                if ((r.getInt("hotelID") == hotelID) &&
                        (r.getInt("roomNumber") == roomnumber) &&
                        (
                                (start_date >= r.getDate("startDate").getTime() && start_date <= r.getDate("endDate").getTime())
                                        || (end_date >= r.getDate("startDate").getTime() && end_date <= r.getDate("endDate").getTime())
                                        || (r.getDate("startDate").getTime() >= start_date && r.getDate("endDate").getTime() <= end_date)

                        )

                )
                    return true;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        HotelPanel = new javax.swing.JPanel();
        instertHotel2 = new javax.swing.JButton();
        hotelLocInsert1 = new javax.swing.JLabel();
        locHotelInsert1 = new javax.swing.JTextField();
        HotelIDInsert1 = new javax.swing.JLabel();
        insertHotelID1 = new javax.swing.JTextField();
        HotelNameInsert1 = new javax.swing.JLabel();
        insertHotelName1 = new javax.swing.JTextField();
        updateHotel1 = new javax.swing.JButton();
        removeHotel1 = new javax.swing.JButton();
        displayHotel = new javax.swing.JButton();
        RoomPanel = new javax.swing.JPanel();
        removeRoom = new javax.swing.JButton();
        insertRoom = new javax.swing.JButton();
        updateRoom = new javax.swing.JButton();
        roomPrice = new javax.swing.JTextField();
        HotelNameInsert3 = new javax.swing.JLabel();
        RoomNumber = new javax.swing.JTextField();
        HotelIDInsert3 = new javax.swing.JLabel();
        roomType = new javax.swing.JTextField();
        hotelLocInsert3 = new javax.swing.JLabel();
        HotelIDInsert5 = new javax.swing.JLabel();
        displayRoom = new javax.swing.JButton();
        RoomHotelID = new javax.swing.JComboBox<>();
        EmployeePanel = new javax.swing.JPanel();
        removeEmployee = new javax.swing.JButton();
        updateEmployee = new javax.swing.JButton();
        insertEmployee = new javax.swing.JButton();
        EmpIDinsert = new javax.swing.JLabel();
        empID = new javax.swing.JTextField();
        EmpNameinsert = new javax.swing.JLabel();
        empName = new javax.swing.JTextField();
        EmpSalaryInsert = new javax.swing.JLabel();
        empSalary = new javax.swing.JTextField();
        EmpIDinsert1 = new javax.swing.JLabel();
        displayRoom1 = new javax.swing.JButton();
        hIDforEmp = new javax.swing.JComboBox<>();
        CustomerPanel = new javax.swing.JPanel();
        removeCustomer = new javax.swing.JButton();
        updateCustomer = new javax.swing.JButton();
        insertCustomer = new javax.swing.JButton();
        CIDinsert = new javax.swing.JLabel();
        customerID = new javax.swing.JTextField();
        customerName = new javax.swing.JTextField();
        roomnumberinsert = new javax.swing.JLabel();
        displayCus = new javax.swing.JButton();
        RoomNumberCus = new javax.swing.JComboBox<>();
        hIDforCus = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        cusStartDate = new com.toedter.calendar.JDateChooser();
        CNameinsert1 = new javax.swing.JLabel();
        CNameinsert2 = new javax.swing.JLabel();
        CNameinsert3 = new javax.swing.JLabel();
        cusEndDate = new com.toedter.calendar.JDateChooser();
        RolePanel = new javax.swing.JPanel();
        removeRole = new javax.swing.JButton();
        updateRole = new javax.swing.JButton();
        insertRole = new javax.swing.JButton();
        roleNameinsert = new javax.swing.JLabel();
        roleName = new javax.swing.JTextField();
        roleRankinsert = new javax.swing.JLabel();
        roleRank = new javax.swing.JTextField();
        displayRole = new javax.swing.JButton();
        Workpanel = new javax.swing.JPanel();
        removeWork = new javax.swing.JButton();
        updateWork = new javax.swing.JButton();
        insertWork = new javax.swing.JButton();
        roleNameinsert1 = new javax.swing.JLabel();
        roleRankinsert1 = new javax.swing.JLabel();
        displayWork = new javax.swing.JButton();
        roleNforW = new javax.swing.JComboBox<>();
        eIDforW = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(53, 205, 153));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(53, 205, 153));

        jTabbedPane1.setBackground(new java.awt.Color(32, 33, 55));

        HotelPanel.setBackground(new java.awt.Color(32, 33, 55));
        HotelPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        HotelPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        instertHotel2.setBackground(new java.awt.Color(53, 205, 153));
        instertHotel2.setText("insert");
        instertHotel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        instertHotel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instertHotel2ActionPerformed(evt);
            }
        });
        HotelPanel.add(instertHotel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 280, 160, 40));

        hotelLocInsert1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        hotelLocInsert1.setForeground(new java.awt.Color(240, 240, 240));
        hotelLocInsert1.setText("location");
        HotelPanel.add(hotelLocInsert1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 120, -1, 20));
        HotelPanel.add(locHotelInsert1, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 120, 250, -1));

        HotelIDInsert1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        HotelIDInsert1.setForeground(new java.awt.Color(240, 240, 240));
        HotelIDInsert1.setText("ID");
        HotelPanel.add(HotelIDInsert1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, -1, 20));
        HotelPanel.add(insertHotelID1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 120, 70, -1));

        HotelNameInsert1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        HotelNameInsert1.setForeground(new java.awt.Color(240, 240, 240));
        HotelNameInsert1.setText("name");
        HotelPanel.add(HotelNameInsert1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 120, -1, 20));
        HotelPanel.add(insertHotelName1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 120, 240, -1));

        updateHotel1.setBackground(new java.awt.Color(53, 205, 153));
        updateHotel1.setText("update");
        updateHotel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        updateHotel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateHotel1ActionPerformed(evt);
            }
        });
        HotelPanel.add(updateHotel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 280, 160, 40));

        removeHotel1.setBackground(new java.awt.Color(53, 205, 153));
        removeHotel1.setText("remove");
        removeHotel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        removeHotel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeHotel1ActionPerformed(evt);
            }
        });
        HotelPanel.add(removeHotel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 280, 160, 40));

        displayHotel.setBackground(new java.awt.Color(53, 205, 153));
        displayHotel.setText("display");
        displayHotel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        displayHotel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayHotelActionPerformed(evt);
            }
        });
        HotelPanel.add(displayHotel, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 280, 160, 40));

        jTabbedPane1.addTab("Hotel", HotelPanel);

        RoomPanel.setBackground(new java.awt.Color(32, 33, 55));
        RoomPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        removeRoom.setBackground(new java.awt.Color(53, 205, 153));
        removeRoom.setText("remove");
        removeRoom.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        removeRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRoomActionPerformed(evt);
            }
        });
        RoomPanel.add(removeRoom, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 300, 160, 40));

        insertRoom.setBackground(new java.awt.Color(53, 205, 153));
        insertRoom.setText("insert");
        insertRoom.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        insertRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertRoomActionPerformed(evt);
            }
        });
        RoomPanel.add(insertRoom, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 300, 160, 40));

        updateRoom.setBackground(new java.awt.Color(53, 205, 153));
        updateRoom.setText("update");
        updateRoom.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        updateRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateRoomActionPerformed(evt);
            }
        });
        RoomPanel.add(updateRoom, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 300, 160, 40));
        RoomPanel.add(roomPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 100, 220, -1));

        HotelNameInsert3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        HotelNameInsert3.setForeground(new java.awt.Color(240, 240, 240));
        HotelNameInsert3.setText("price");
        RoomPanel.add(HotelNameInsert3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 100, -1, 20));
        RoomPanel.add(RoomNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 110, -1));

        HotelIDInsert3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        HotelIDInsert3.setForeground(new java.awt.Color(240, 240, 240));
        HotelIDInsert3.setText("number");
        RoomPanel.add(HotelIDInsert3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, -1, 20));
        RoomPanel.add(roomType, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 100, 240, -1));

        hotelLocInsert3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        hotelLocInsert3.setForeground(new java.awt.Color(240, 240, 240));
        hotelLocInsert3.setText("type");
        RoomPanel.add(hotelLocInsert3, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 100, -1, 20));

        HotelIDInsert5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        HotelIDInsert5.setForeground(new java.awt.Color(240, 240, 240));
        HotelIDInsert5.setText("hotel ID");
        RoomPanel.add(HotelIDInsert5, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 160, -1, 20));

        displayRoom.setBackground(new java.awt.Color(53, 205, 153));
        displayRoom.setText("display");
        displayRoom.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        displayRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayRoomActionPerformed(evt);
            }
        });
        RoomPanel.add(displayRoom, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 300, 160, 40));

        RoomPanel.add(RoomHotelID, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 160, 150, -1));

        jTabbedPane1.addTab("Room", RoomPanel);

        EmployeePanel.setBackground(new java.awt.Color(32, 33, 55));
        EmployeePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        removeEmployee.setBackground(new java.awt.Color(53, 205, 153));
        removeEmployee.setText("remove");
        removeEmployee.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        removeEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeEmployeeActionPerformed(evt);
            }
        });
        EmployeePanel.add(removeEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 300, 160, 40));

        updateEmployee.setBackground(new java.awt.Color(53, 205, 153));
        updateEmployee.setText("update");
        updateEmployee.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        updateEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateEmployeeActionPerformed(evt);
            }
        });
        EmployeePanel.add(updateEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 300, 160, 40));

        insertEmployee.setBackground(new java.awt.Color(53, 205, 153));
        insertEmployee.setText("insert");
        insertEmployee.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        insertEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertEmployeeActionPerformed(evt);
            }
        });
        EmployeePanel.add(insertEmployee, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 300, 160, 40));

        EmpIDinsert.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        EmpIDinsert.setForeground(new java.awt.Color(240, 240, 240));
        EmpIDinsert.setText("ID");
        EmployeePanel.add(EmpIDinsert, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, -1, 20));
        EmployeePanel.add(empID, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 90, 70, -1));

        EmpNameinsert.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        EmpNameinsert.setForeground(new java.awt.Color(240, 240, 240));
        EmpNameinsert.setText("name");
        EmployeePanel.add(EmpNameinsert, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 90, -1, 20));
        EmployeePanel.add(empName, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 90, 240, -1));

        EmpSalaryInsert.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        EmpSalaryInsert.setForeground(new java.awt.Color(240, 240, 240));
        EmpSalaryInsert.setText("salary");
        EmployeePanel.add(EmpSalaryInsert, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 90, -1, 20));
        EmployeePanel.add(empSalary, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 90, 250, -1));

        EmpIDinsert1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        EmpIDinsert1.setForeground(new java.awt.Color(240, 240, 240));
        EmpIDinsert1.setText("hotel ID");
        EmployeePanel.add(EmpIDinsert1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 140, -1, 20));

        displayRoom1.setBackground(new java.awt.Color(53, 205, 153));
        displayRoom1.setText("display");
        displayRoom1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        displayRoom1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayRoom1ActionPerformed(evt);
            }
        });
        EmployeePanel.add(displayRoom1, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 300, 160, 40));

        EmployeePanel.add(hIDforEmp, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 140, 140, -1));

        jTabbedPane1.addTab("Employee", EmployeePanel);

        CustomerPanel.setBackground(new java.awt.Color(32, 33, 55));
        CustomerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        removeCustomer.setBackground(new java.awt.Color(53, 205, 153));
        removeCustomer.setText("remove");
        removeCustomer.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        removeCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCustomerActionPerformed(evt);
            }
        });
        CustomerPanel.add(removeCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 310, 160, 40));

        updateCustomer.setBackground(new java.awt.Color(53, 205, 153));
        updateCustomer.setText("update");
        updateCustomer.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        updateCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCustomerActionPerformed(evt);
            }
        });
        CustomerPanel.add(updateCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 310, 160, 40));

        insertCustomer.setBackground(new java.awt.Color(53, 205, 153));
        insertCustomer.setText("insert");
        insertCustomer.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        insertCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertCustomerActionPerformed(evt);
            }
        });
        CustomerPanel.add(insertCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 310, 160, 40));

        CIDinsert.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        CIDinsert.setForeground(new java.awt.Color(240, 240, 240));
        CIDinsert.setText("ID");
        CustomerPanel.add(CIDinsert, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, -1, 20));
        CustomerPanel.add(customerID, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 130, 120, -1));
        CustomerPanel.add(customerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 130, 240, -1));

        roomnumberinsert.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        roomnumberinsert.setForeground(new java.awt.Color(240, 240, 240));
        roomnumberinsert.setText("room number");
        roomnumberinsert.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomnumberinsertMouseClicked(evt);
            }
        });
        CustomerPanel.add(roomnumberinsert, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 130, -1, 20));

        displayCus.setBackground(new java.awt.Color(53, 205, 153));
        displayCus.setText("display");
        displayCus.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        displayCus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayCusActionPerformed(evt);
            }
        });
        CustomerPanel.add(displayCus, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 310, 160, 40));

        RoomNumberCus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{" "}));
        CustomerPanel.add(RoomNumberCus, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 130, 200, -1));

        hIDforCus.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                hIDforCusItemStateChanged(evt);
            }
        });
        CustomerPanel.add(hIDforCus, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 50, 400, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Hotel ID");
        CustomerPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 50, 70, 20));
        CustomerPanel.add(cusStartDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 210, 180, -1));
        cusStartDate.getJCalendar().setMinSelectableDate(new Date(java.util.Calendar.getInstance().getTime().getTime()));

        CNameinsert1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        CNameinsert1.setForeground(new java.awt.Color(240, 240, 240));
        CNameinsert1.setText("name");
        CustomerPanel.add(CNameinsert1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 130, -1, 20));

        CNameinsert2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        CNameinsert2.setForeground(new java.awt.Color(240, 240, 240));
        CNameinsert2.setText("start date");
        CustomerPanel.add(CNameinsert2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 210, -1, 20));

        CNameinsert3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        CNameinsert3.setForeground(new java.awt.Color(240, 240, 240));
        CNameinsert3.setText("end date");
        CustomerPanel.add(CNameinsert3, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 210, -1, 20));
        CustomerPanel.add(cusEndDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 210, 180, -1));
        cusEndDate.getJCalendar().setMinSelectableDate(new Date(java.util.Calendar.getInstance().getTime().getTime()));

        jTabbedPane1.addTab("Customer", CustomerPanel);

        RolePanel.setBackground(new java.awt.Color(32, 33, 55));
        RolePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        removeRole.setBackground(new java.awt.Color(53, 205, 153));
        removeRole.setText("remove");
        removeRole.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        removeRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRoleActionPerformed(evt);
            }
        });
        RolePanel.add(removeRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 270, 160, 40));

        updateRole.setBackground(new java.awt.Color(53, 205, 153));
        updateRole.setText("update");
        updateRole.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        updateRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateRoleActionPerformed(evt);
            }
        });
        RolePanel.add(updateRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 270, 160, 40));

        insertRole.setBackground(new java.awt.Color(53, 205, 153));
        insertRole.setText("insert");
        insertRole.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        insertRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertRoleActionPerformed(evt);
            }
        });
        RolePanel.add(insertRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 270, 160, 40));

        roleNameinsert.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        roleNameinsert.setForeground(new java.awt.Color(240, 240, 240));
        roleNameinsert.setText("name");
        RolePanel.add(roleNameinsert, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, -1, 20));
        RolePanel.add(roleName, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 150, 230, -1));

        roleRankinsert.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        roleRankinsert.setForeground(new java.awt.Color(240, 240, 240));
        roleRankinsert.setText("rank");
        RolePanel.add(roleRankinsert, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 150, -1, 20));
        RolePanel.add(roleRank, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 150, 240, -1));

        displayRole.setBackground(new java.awt.Color(53, 205, 153));
        displayRole.setText("display");
        displayRole.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        displayRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayRoleActionPerformed(evt);
            }
        });
        RolePanel.add(displayRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 270, 160, 40));

        jTabbedPane1.addTab("Role", RolePanel);

        Workpanel.setBackground(new java.awt.Color(32, 33, 55));
        Workpanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        removeWork.setBackground(new java.awt.Color(53, 205, 153));
        removeWork.setText("remove");
        removeWork.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        removeWork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeWorkActionPerformed(evt);
            }
        });
        Workpanel.add(removeWork, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 270, 160, 40));

        updateWork.setBackground(new java.awt.Color(53, 205, 153));
        updateWork.setText("update");
        updateWork.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        updateWork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateWorkActionPerformed(evt);
            }
        });
        Workpanel.add(updateWork, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 270, 160, 40));

        insertWork.setBackground(new java.awt.Color(53, 205, 153));
        insertWork.setText("insert");
        insertWork.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        insertWork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertWorkActionPerformed(evt);
            }
        });
        Workpanel.add(insertWork, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 270, 160, 40));

        roleNameinsert1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        roleNameinsert1.setForeground(new java.awt.Color(240, 240, 240));
        roleNameinsert1.setText("Employee ID");
        Workpanel.add(roleNameinsert1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 150, -1, 20));

        roleRankinsert1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        roleRankinsert1.setForeground(new java.awt.Color(240, 240, 240));
        roleRankinsert1.setText("Role name");
        Workpanel.add(roleRankinsert1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 150, -1, 20));

        displayWork.setBackground(new java.awt.Color(53, 205, 153));
        displayWork.setText("display");
        displayWork.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        displayWork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayWorkActionPerformed(evt);
            }
        });
        Workpanel.add(displayWork, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 270, 160, 40));

        Workpanel.add(roleNforW, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 150, 210, -1));

        Workpanel.add(eIDforW, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 150, 210, -1));

        jTabbedPane1.addTab("work AS", Workpanel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 978, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 978, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 546, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertRoleActionPerformed
        var name = roleName.getText();
        var rank = roleRank.getText();
        if (name.length() != 0 && rank.length() != 0) {
            try {
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                System.out.println("connection done");
                PreparedStatement p = c.prepareStatement("INSERT INTO `role`(`name`, `rank`) VALUES (?,?)");
                p.setString(1, name);
                p.setString(2, rank);
                p.execute();
                c.close();
                JOptionPane.showMessageDialog(null, "insert done");
                System.out.println("insert done");
                try {
                    Connection cc = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                    System.out.println("connection done");
                    Statement s = cc.createStatement();
                    ResultSet r = s.executeQuery("SELECT `name`FROM `role`");
                    roleNforW.removeAllItems();
                    while (r.next()) {
                        var gg = r.getString("name");
                        roleNforW.addItem(gg);
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not add because " + e.getMessage());
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not add because " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "some information is empty");
        }


    }//GEN-LAST:event_insertRoleActionPerformed

    private void updateRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateRoleActionPerformed

        var name = roleName.getText();
        var rank = roleRank.getText();
        try {
            Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
            System.out.println("connection done");
            PreparedStatement p = c.prepareStatement("UPDATE `role` SET `rank` = ? WHERE `role`.`name` = ?");
            p.setString(1, rank);
            p.setString(2, name);
            p.execute();
            c.close();
            JOptionPane.showMessageDialog(null, "update done");
            System.out.println("update done");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "can not update because " + e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "can not update because " + e.getMessage());
        }
    }//GEN-LAST:event_updateRoleActionPerformed

    private void removeRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRoleActionPerformed
        var name = roleName.getText();
        if (name.length() == 0) {
            JOptionPane.showMessageDialog(null, "some information is empty");
            return;
        }
        try {
            Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
            System.out.println("connection done");
            PreparedStatement p = c.prepareStatement("DELETE FROM `role` WHERE `role`.`name` = ?");
            p.setString(1, name);
            p.execute();
            c.close();
            JOptionPane.showMessageDialog(null, "remove done");
            System.out.println("remove done");
            try {
                Connection cc = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                System.out.println("connection done");
                Statement s = cc.createStatement();
                ResultSet r = s.executeQuery("SELECT `name`FROM `role`");
                roleNforW.removeAllItems();
                while (r.next()) {
                    var gg = r.getString("name");
                    roleNforW.addItem(gg);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "can not remove because " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "can not remove because " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_removeRoleActionPerformed

    private void insertCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertCustomerActionPerformed
        boolean f = false;
        var id = customerID.getText();
        var name = customerName.getText();
        var roomID = RoomNumberCus.getSelectedItem().toString();
        var hotelID = hIDforCus.getSelectedItem().toString();

        long start_date = 0;
        long end_date = 0;


        if (id.length() == 0 || name.length() == 0 || hotelID.length() == 0) {
            JOptionPane.showMessageDialog(null, "some information is empty");
            return;
        }

        try {
            start_date = cusStartDate.getDate().getTime();
            end_date = cusEndDate.getDate().getTime();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "please enter the date");
            return;
        }
        if (end_date < start_date) {
            JOptionPane.showMessageDialog(null, "can not add because the end date less than start date");
            return;
        }

        try {
            if (!checker(start_date, end_date, Integer.parseInt(roomID), Integer.parseInt(hotelID))) {
                if (id.length() != 0) {
                    int ID;
                    int RoomNumber;
                    int HotelID;
                    try {
                        ID = Integer.parseInt(id);
                        RoomNumber = Integer.parseInt(roomID);
                        HotelID = Integer.parseInt(hotelID);
                        Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                        System.out.println("connection done");
                        PreparedStatement p = c.prepareStatement("INSERT INTO `customer`(`ID`, `name`,`roomNumber`,`startDate`,`endDate`,`hotelID`) VALUES (?,?,?,?,?,?)");
                        p.setInt(1, ID);
                        p.setString(2, name);
                        p.setInt(3, RoomNumber);
                        p.setDate(4, new Date(start_date));
                        p.setDate(5, new Date(end_date));
                        p.setInt(6, HotelID);
                        p.execute();
                        c.close();
                        JOptionPane.showMessageDialog(null, "insert done");
                        System.out.println("insert done");
                    } catch (SQLException e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(null, "can not add because " + e.getMessage());
                    } catch (Exception e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(null, "can not add because " + e.getMessage());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "can not add because this date is token");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "can not add because " + e.getMessage());
        }
    }//GEN-LAST:event_insertCustomerActionPerformed

    private void updateCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCustomerActionPerformed
        var id = customerID.getText();
        var name = customerName.getText();
        var roomID = RoomNumberCus.getSelectedItem().toString();
        if (id.length() != 0) {
            int ID = Integer.parseInt(id);
            int RoomNumber;
            try {
                RoomNumber = Integer.parseInt(roomID);
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                System.out.println("connection done");
                PreparedStatement p = c.prepareStatement("UPDATE `customer` SET `name` = ? ,`roomNumber`= ? WHERE `customer`.`ID` = ?");
                p.setString(1, name);
                p.setInt(2, RoomNumber);
                p.setInt(3, ID);
                p.execute();
                c.close();
                JOptionPane.showMessageDialog(null, "update done");
                System.out.println("update done");
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not update because " + e.getMessage());
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not update because " + e.getMessage());
            }
        }
    }//GEN-LAST:event_updateCustomerActionPerformed

    private void removeCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCustomerActionPerformed
        var id = customerID.getText();
        if (id.length() != 0) {
            int ID = Integer.parseInt(id);
            try {
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                System.out.println("connection done");
                PreparedStatement p = c.prepareStatement("DELETE FROM `customer` WHERE `customer`.`ID` = ?");
                p.setInt(1, ID);
                p.execute();
                c.close();
                JOptionPane.showMessageDialog(null, "remove done");
                System.out.println("remove done");
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not remove because " + e.getMessage());
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not remove because " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "some information is empty");
        }
    }//GEN-LAST:event_removeCustomerActionPerformed

    private void insertEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertEmployeeActionPerformed
        var id = empID.getText();
        var name = empName.getText();
        var salary = empSalary.getText();
        var hotelID = hIDforEmp.getSelectedItem().toString();
        if (id.length() != 0 && salary.length() != 0 && hotelID.length() != 0 && name.length() != 0) {
            int ID;
            double Salary;
            int HotelID;
            try {
                ID = Integer.parseInt(id);
                Salary = Double.parseDouble(salary);
                HotelID = Integer.parseInt(hotelID);
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                System.out.println("connection done");
                PreparedStatement p = c.prepareStatement("INSERT INTO `employee`(`ID`, `name`, `salary`, `HotelID`) VALUES (?,?,?,?)");
                p.setInt(1, ID);
                p.setString(2, name);
                p.setDouble(3, Salary);
                p.setInt(4, HotelID);
                p.execute();
                c.close();
                JOptionPane.showMessageDialog(null, "insert done");
                System.out.println("insert done");
                try {
                    Connection cc = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                    System.out.println("connection done");
                    Statement s = cc.createStatement();
                    ResultSet r = s.executeQuery("SELECT `ID` FROM `employee`");
                    eIDforW.removeAllItems();
                    while (r.next()) {
                        var gg = r.getInt("ID");
                        eIDforW.addItem(String.valueOf(gg));
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not add because " + e.getMessage());
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not add because " + e.getMessage());
            }
        } else JOptionPane.showMessageDialog(null, "some information is empty");

    }//GEN-LAST:event_insertEmployeeActionPerformed

    private void updateEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateEmployeeActionPerformed
        var id = empID.getText();
        var name = empName.getText();
        var salary = empSalary.getText();
        var hotelID = hIDforEmp.getSelectedItem().toString();
        if (id.length() != 0 && salary.length() != 0 && hotelID.length() != 0) {
            int ID;
            double Salary;
            int HotelID;
            try {
                ID = Integer.parseInt(id);
                Salary = Double.parseDouble(salary);
                HotelID = Integer.parseInt(hotelID);
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                System.out.println("connection done");
                PreparedStatement p = c.prepareStatement("UPDATE `employee` SET `name` = ?, `salary` = ?, `HotelID` = ? WHERE `employee`.`ID` = ?");
                p.setString(1, name);
                p.setDouble(2, Salary);
                p.setInt(3, HotelID);
                p.setInt(4, ID);
                p.execute();
                c.close();
                JOptionPane.showMessageDialog(null, "update done");
                System.out.println("update done");
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not update because " + e.getMessage());
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not update because " + e.getMessage());
            }
        }
    }//GEN-LAST:event_updateEmployeeActionPerformed

    private void removeEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeEmployeeActionPerformed
        var id = empID.getText();
        if (id.length() != 0) {
            int ID;
            try {
                ID = Integer.parseInt(id);
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                System.out.println("connection done");
                PreparedStatement p = c.prepareStatement("DELETE FROM `employee` WHERE `employee`.`ID` = ?");
                p.setInt(1, ID);
                p.execute();
                c.close();
                JOptionPane.showMessageDialog(null, "remove done");
                System.out.println("remove done");
                try {
                    Connection cc = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                    System.out.println("connection done");
                    Statement s = cc.createStatement();
                    ResultSet r = s.executeQuery("SELECT `ID` FROM `employee`");
                    eIDforW.removeAllItems();
                    while (r.next()) {
                        var gg = r.getInt("ID");
                        eIDforW.addItem(String.valueOf(gg));
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not remove because " + e.getMessage());
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not remove because " + e.getMessage());
            }
        } else JOptionPane.showMessageDialog(null, "some information is empty");
    }//GEN-LAST:event_removeEmployeeActionPerformed

    private void insertRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertRoomActionPerformed
        var number = RoomNumber.getText();
        var price = roomPrice.getText();
        var type = roomType.getText();
        var hotelID = RoomHotelID.getSelectedItem().toString();
        if (number.length() != 0 && price.length() != 0 && type.length() != 0 && hotelID.length() != 0) {
            int Number;
            double Price;
            int HotelID;
            try {
                Number = Integer.parseInt(number);
                Price = Double.parseDouble(price);
                HotelID = Integer.parseInt(hotelID);
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                System.out.println("connection done");
                PreparedStatement p = c.prepareStatement("INSERT INTO `room`(`number`, `price`, `type`, `HotelID`) VALUES (?,?,?,?)");
                p.setInt(1, Number);
                p.setDouble(2, Price);
                p.setString(3, type);
                p.setInt(4, HotelID);
                p.execute();
                c.close();
                JOptionPane.showMessageDialog(null, "insert done");
                System.out.println("insert done");
                try {
                    Connection cc = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                    System.out.println("connection done");
                    Statement s = cc.createStatement();
                    ResultSet r = s.executeQuery("SELECT `number` FROM `room`");
                    //r.first();
                    RoomNumberCus.removeAllItems();
                    while (r.next()) {
                        var gg = r.getInt("number");
                        RoomNumberCus.addItem(String.valueOf(gg));
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not add because " + e.getMessage());
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not add because " + e.getMessage());
            }
        } else JOptionPane.showMessageDialog(null, "some information is empty");
    }//GEN-LAST:event_insertRoomActionPerformed

    private void removeRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRoomActionPerformed
        var number = RoomNumber.getText();
        if (number.length() != 0) {
            int Number;
            try {
                Number = Integer.parseInt(number);

                Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                System.out.println("connection done");
                PreparedStatement p = c.prepareStatement("DELETE FROM `room` WHERE `room`.`number` = ?");
                p.setInt(1, Number);
                p.execute();
                c.close();
                JOptionPane.showMessageDialog(null, "remove done");
                System.out.println("remove done");
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not remove because " + e.getMessage());
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not remove because " + e.getMessage());
            }
        } else JOptionPane.showMessageDialog(null, "please enter room number");
    }//GEN-LAST:event_removeRoomActionPerformed

    private void removeHotel1ActionPerformed(java.awt.event.ActionEvent evt) {
        var x = insertHotelID1.getText();
        if (x.length() != 0) {
            int ID = Integer.parseInt(x);
            try {
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                System.out.println("connection done");
                PreparedStatement p = c.prepareStatement("DELETE FROM `hotel` WHERE `hotel`.`ID` = ?");
                p.setInt(1, ID);
                p.execute();
                c.close();
                try {
                    Connection cc = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                    System.out.println("connection done");
                    Statement s = cc.createStatement();
                    ResultSet r = s.executeQuery("SELECT `ID` FROM `hotel`");
                    hIDforCus.removeAllItems();
                    while (r.next()) {
                        var gg = r.getInt("ID");
                        hIDforCus.addItem(String.valueOf(gg));
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                JOptionPane.showMessageDialog(null, "remove done");
                System.out.println("remove done");
                try {
                    Connection cc = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                    System.out.println("connection done");
                    Statement s = cc.createStatement();
                    ResultSet r = s.executeQuery("SELECT `ID` FROM `hotel`");
                    RoomHotelID.removeAllItems();
                    while (r.next()) {
                        var gg = r.getInt("ID");
                        RoomHotelID.addItem(String.valueOf(gg));
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                try {
                    Connection ccc = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                    System.out.println("connection done");
                    Statement s = ccc.createStatement();
                    ResultSet r = s.executeQuery("SELECT `ID` FROM `hotel`");
                    while (r.next()) {
                        var gg = r.getInt("ID");
                        hIDforEmp.addItem(String.valueOf(gg));
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not remove because " + e.getMessage());
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not remove because " + e.getMessage());
            }
        } else JOptionPane.showMessageDialog(null, "please enter the ID");
    }

    private void updateHotel1ActionPerformed(java.awt.event.ActionEvent evt) {
        var x = insertHotelID1.getText();
        var name = insertHotelName1.getText();
        var location = locHotelInsert1.getText();
        if (x.length() != 0) {
            int ID = Integer.parseInt(x);
            try {
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                System.out.println("connection done");
                PreparedStatement p = c.prepareStatement("UPDATE `hotel` SET `name`=?,`location`=? WHERE `hotel`.`ID` = ?");
                //p.setInt(1,ID);
                p.setString(1, name);
                p.setString(2, location);
                p.setInt(3, ID);
                p.execute();
                c.close();
                JOptionPane.showMessageDialog(null, "update done");
                System.out.println("update done");
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not update because " + e.getMessage());
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not update because " + e.getMessage());
            }
        }
    }

    private void instertHotel2ActionPerformed(java.awt.event.ActionEvent evt) {
        var id = insertHotelID1.getText();
        var name = insertHotelName1.getText();
        var location = locHotelInsert1.getText();
        if (id.length() != 0 && name.length() != 0 && location.length() != 0) {
            int ID = Integer.parseInt(id);
            try {
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                System.out.println("connection done");
                PreparedStatement p = c.prepareStatement("INSERT INTO `hotel`(`ID`, `name`, `location`) VALUES (?,?,?)");
                p.setInt(1, ID);
                p.setString(2, name);
                p.setString(3, location);
                p.execute();
                c.close();
                try {
                    Connection cc = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                    System.out.println("connection done");
                    Statement s = cc.createStatement();
                    ResultSet r = s.executeQuery("SELECT `ID` FROM `hotel`");
                    hIDforCus.removeAllItems();
                    while (r.next()) {
                        var gg = r.getInt("ID");
                        hIDforCus.addItem(String.valueOf(gg));
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                JOptionPane.showMessageDialog(null, "insert done");
                System.out.println("insert done");
                try {
                    Connection cc = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                    System.out.println("connection done");
                    Statement s = cc.createStatement();
                    ResultSet r = s.executeQuery("SELECT `ID` FROM `hotel`");
                    RoomHotelID.removeAllItems();
                    while (r.next()) {
                        var gg = r.getInt("ID");
                        RoomHotelID.addItem(String.valueOf(gg));
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                try {
                    Connection ccc = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                    System.out.println("connection done");
                    Statement s = ccc.createStatement();
                    ResultSet r = s.executeQuery("SELECT `ID` FROM `hotel`");
                    while (r.next()) {
                        var gg = r.getInt("ID");
                        hIDforEmp.addItem(String.valueOf(gg));
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }

                try {
                    Connection ccccc = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                    System.out.println("connection done");
                    Statement s = ccccc.createStatement();
                    ResultSet r = s.executeQuery("SELECT `ID` FROM `hotel`");
                    hIDforEmp.removeAllItems();
                    while (r.next()) {
                        var gg = r.getInt("ID");
                        hIDforEmp.addItem(String.valueOf(gg));
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }

            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not add because " + e.getMessage());
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not add because " + e.getMessage());
            }
        } else JOptionPane.showMessageDialog(null, "some information is empty");
    }

    //here
    private void updateRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateRoomActionPerformed
        var number = RoomNumber.getText();
        var price = roomPrice.getText();
        var type = roomType.getText();
        var hotelID = RoomHotelID.getSelectedItem().toString();
        if (number.length() != 0) {
            int Number;
            double Price;
            int HotelID;
            try {
                Number = Integer.parseInt(number);
                Price = Double.parseDouble(price);
                HotelID = Integer.parseInt(hotelID);
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                System.out.println("connection done");
                PreparedStatement p = c.prepareStatement("UPDATE `room` SET `price`=?,`type`=?,`HotelID`=? WHERE `room`.`number` = ?");
                p.setDouble(1, Price);
                p.setString(2, type);
                p.setInt(3, HotelID);
                p.setInt(4, Number);
                p.execute();
                c.close();
                JOptionPane.showMessageDialog(null, "update done");
                System.out.println("update done");
            } catch (SQLException e) {

                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not update because " + e.getMessage());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "can not update because " + e.getMessage());
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_updateRoomActionPerformed

    private void removeWorkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeWorkActionPerformed
        var id = eIDforW.getSelectedItem().toString();
        var name = roleNforW.getSelectedItem().toString();
        if (id.length() != 0 && name.length() != 0) {
            int ID;
            try {
                ID = Integer.parseInt(id);
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                System.out.println("connection done");
                PreparedStatement p = c.prepareStatement("DELETE FROM `working as` WHERE (`working as`.`EmployeeID` = ? and `working as`.`RoleName` = ?) ");
                p.setInt(1, ID);
                p.setString(2, name);
                p.execute();
                c.close();
                JOptionPane.showMessageDialog(null, "remove done");
                System.out.println("remove done");
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not remove because " + e.getMessage());
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not remove because " + e.getMessage());
            }
        } else JOptionPane.showMessageDialog(null, "some information is empty");
    }//GEN-LAST:event_removeWorkActionPerformed

    private void updateWorkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateWorkActionPerformed
        var id = eIDforW.getSelectedItem().toString();
        var name = roleNforW.getSelectedItem().toString();
        if (id.length() != 0) {
            int ID;
            try {
                ID = Integer.parseInt(id);
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                System.out.println("connection done");
                PreparedStatement p = c.prepareStatement("UPDATE `working as` SET `RoleName`= ? WHERE `working as`.`EmployeeID` = ?");
                p.setString(1, name);
                p.setInt(2, ID);
                p.execute();
                c.close();
                JOptionPane.showMessageDialog(null, "can not update because ");
                System.out.println("update done");
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not update because " + e.getMessage());
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not update because " + e.getMessage());
            }
        }
    }//GEN-LAST:event_updateWorkActionPerformed

    private void insertWorkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertWorkActionPerformed
        var id = eIDforW.getSelectedItem().toString();
        var name = roleNforW.getSelectedItem().toString();
        if (id.length() != 0 && name.length() != 0) {
            int ID;
            try {
                ID = Integer.parseInt(id);
                Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                System.out.println("connection done");
                PreparedStatement p = c.prepareStatement("INSERT INTO `working as`(`EmployeeID`, `RoleName`) VALUES (?,?)");
                p.setInt(1, ID);
                p.setString(2, name);
                p.execute();
                c.close();
                JOptionPane.showMessageDialog(null, "insert done");
                System.out.println("insert done");
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "can not add because " + e.getMessage());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "can not add because " + e.getMessage());
                e.printStackTrace();
            }
        } else JOptionPane.showMessageDialog(null, "some information is empty");
    }//GEN-LAST:event_insertWorkActionPerformed

    private void displayHotelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayHotelActionPerformed
        if (t.displayhotel())
            t.setVisible(true);
    }//GEN-LAST:event_displayHotelActionPerformed

    private void displayRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayRoomActionPerformed
        if (t.displayRoom())
            t.setVisible(true);
    }//GEN-LAST:event_displayRoomActionPerformed

    private void displayRoom1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayRoom1ActionPerformed
        if (t.displayeEmp())
            t.setVisible(true);
    }//GEN-LAST:event_displayRoom1ActionPerformed

    private void displayCusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayCusActionPerformed
        if (t.displayeCus())
            t.setVisible(true);
    }//GEN-LAST:event_displayCusActionPerformed

    private void displayRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayRoleActionPerformed
        if (t.displayeRole())
            t.setVisible(true);
    }//GEN-LAST:event_displayRoleActionPerformed

    private void displayWorkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayWorkActionPerformed
        if (t.displayeWork())
            t.setVisible(true);
    }//GEN-LAST:event_displayWorkActionPerformed

    private void hIDforCusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hIDforCusItemStateChanged

        var id = hIDforCus.getSelectedItem();
        if (id != null) {
            var hotelID = id.toString();
            if (hotelID.length() != 0) {
                int HotelID;
                try {
                    HotelID = Integer.parseInt(hotelID);
                    Connection c = DriverManager.getConnection("jdbc:mysql://localhost/hotel", "root", "");
                    System.out.println("connection done");
                    var p = c.prepareStatement("SELECT `number` FROM `room` WHERE `HotelID` = ?");
                    p.setInt(1, HotelID);
                    var r = p.executeQuery();
                    RoomNumberCus.removeAllItems();
                    while (r.next()) {
                        var gg = r.getInt("number");
                        RoomNumberCus.addItem(String.valueOf(gg));
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_hIDforCusItemStateChanged

    private void roomnumberinsertMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomnumberinsertMouseClicked
        if (t.displayRoom())
            t.setVisible(true);
    }//GEN-LAST:event_roomnumberinsertMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Hotel_Mangment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Hotel_Mangment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Hotel_Mangment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Hotel_Mangment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Hotel_Mangment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CIDinsert;
    private javax.swing.JLabel CNameinsert1;
    private javax.swing.JLabel CNameinsert2;
    private javax.swing.JLabel CNameinsert3;
    private javax.swing.JPanel CustomerPanel;
    private javax.swing.JLabel EmpIDinsert;
    private javax.swing.JLabel EmpIDinsert1;
    private javax.swing.JLabel EmpNameinsert;
    private javax.swing.JLabel EmpSalaryInsert;
    private javax.swing.JPanel EmployeePanel;
    private javax.swing.JLabel HotelIDInsert1;
    private javax.swing.JLabel HotelIDInsert3;
    private javax.swing.JLabel HotelIDInsert5;
    private javax.swing.JLabel HotelNameInsert1;
    private javax.swing.JLabel HotelNameInsert3;
    private javax.swing.JPanel HotelPanel;
    private javax.swing.JPanel RolePanel;
    private javax.swing.JComboBox<String> RoomHotelID;
    private javax.swing.JTextField RoomNumber;
    private javax.swing.JComboBox<String> RoomNumberCus;
    private javax.swing.JPanel RoomPanel;
    private javax.swing.JPanel Workpanel;
    private com.toedter.calendar.JDateChooser cusEndDate;
    private com.toedter.calendar.JDateChooser cusStartDate;
    private javax.swing.JTextField customerID;
    private javax.swing.JTextField customerName;
    private javax.swing.JButton displayCus;
    private javax.swing.JButton displayHotel;
    private javax.swing.JButton displayRole;
    private javax.swing.JButton displayRoom;
    private javax.swing.JButton displayRoom1;
    private javax.swing.JButton displayWork;
    private javax.swing.JComboBox<String> eIDforW;
    private javax.swing.JTextField empID;
    private javax.swing.JTextField empName;
    private javax.swing.JTextField empSalary;
    private javax.swing.JComboBox<String> hIDforCus;
    private javax.swing.JComboBox<String> hIDforEmp;
    private javax.swing.JLabel hotelLocInsert1;
    private javax.swing.JLabel hotelLocInsert3;
    private javax.swing.JButton insertCustomer;
    private javax.swing.JButton insertEmployee;
    private javax.swing.JTextField insertHotelID1;
    private javax.swing.JTextField insertHotelName1;
    private javax.swing.JButton insertRole;
    private javax.swing.JButton insertRoom;
    private javax.swing.JButton insertWork;
    private javax.swing.JButton instertHotel2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField locHotelInsert1;
    private javax.swing.JButton removeCustomer;
    private javax.swing.JButton removeEmployee;
    private javax.swing.JButton removeHotel1;
    private javax.swing.JButton removeRole;
    private javax.swing.JButton removeRoom;
    private javax.swing.JButton removeWork;
    private javax.swing.JTextField roleName;
    private javax.swing.JLabel roleNameinsert;
    private javax.swing.JLabel roleNameinsert1;
    private javax.swing.JComboBox<String> roleNforW;
    private javax.swing.JTextField roleRank;
    private javax.swing.JLabel roleRankinsert;
    private javax.swing.JLabel roleRankinsert1;
    private javax.swing.JTextField roomPrice;
    private javax.swing.JTextField roomType;
    private javax.swing.JLabel roomnumberinsert;
    private javax.swing.JButton updateCustomer;
    private javax.swing.JButton updateEmployee;
    private javax.swing.JButton updateHotel1;
    private javax.swing.JButton updateRole;
    private javax.swing.JButton updateRoom;
    private javax.swing.JButton updateWork;
    // End of variables declaration//GEN-END:variables
}
